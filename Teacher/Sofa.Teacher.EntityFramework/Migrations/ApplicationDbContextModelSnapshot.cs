// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sofa.Teacher.EntityFramework.Context;

namespace Sofa.Teacher.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sofa.Teacher.Model.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<short>("Order");

                    b.Property<int>("RowVersion");

                    b.Property<Guid>("SyllabusId");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_Course");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Sofa.Teacher.Model.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<short>("Order");

                    b.Property<int>("PostType");

                    b.Property<int>("RowVersion");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_Post");

                    b.HasIndex("CourseId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Sofa.Teacher.Model.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("RowVersion");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_Syllabus");

                    b.ToTable("Syllabus");
                });

            modelBuilder.Entity("Sofa.Teacher.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<Guid?>("LastCourseId");

                    b.Property<string>("LastName");

                    b.Property<int>("Level");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RowVersion");

                    b.Property<string>("UserName");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("CourseId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("731874e2-b89c-4509-819a-5b69396a336b"),
                            CreateDate = new DateTime(2020, 2, 9, 3, 51, 21, 18, DateTimeKind.Local).AddTicks(3433),
                            Description = "",
                            Email = "jahanbin.ali1988@gmail.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastCourseId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Jahanbin",
                            Level = 2,
                            ModifyDate = new DateTime(2020, 2, 9, 3, 51, 21, 18, DateTimeKind.Local).AddTicks(7277),
                            PhoneNumber = "09224957626",
                            RowVersion = 0,
                            UserName = "09224957626"
                        },
                        new
                        {
                            Id = new Guid("253e472e-21ac-4864-b218-b364169d0611"),
                            CreateDate = new DateTime(2020, 2, 9, 3, 51, 21, 19, DateTimeKind.Local).AddTicks(1070),
                            Description = "",
                            Email = "jahanbinali88@yahoo.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastCourseId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Jahanbin",
                            Level = 1,
                            ModifyDate = new DateTime(2020, 2, 9, 3, 51, 21, 19, DateTimeKind.Local).AddTicks(1110),
                            PhoneNumber = "09389459731",
                            RowVersion = 0,
                            UserName = "09389459731"
                        },
                        new
                        {
                            Id = new Guid("50ecc8e1-5c5c-4a97-a5f5-af9e9eba1b70"),
                            CreateDate = new DateTime(2020, 2, 9, 3, 51, 21, 19, DateTimeKind.Local).AddTicks(1142),
                            Description = "",
                            Email = "jahanbin.ali1988@yahoo.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastCourseId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Jahanbin",
                            Level = 0,
                            ModifyDate = new DateTime(2020, 2, 9, 3, 51, 21, 19, DateTimeKind.Local).AddTicks(1145),
                            PhoneNumber = "09370429731",
                            RowVersion = 0,
                            UserName = "09370429731"
                        });
                });

            modelBuilder.Entity("Sofa.Teacher.Model.Course", b =>
                {
                    b.HasOne("Sofa.Teacher.Model.Syllabus", "Syllabus")
                        .WithMany("Course")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofa.Teacher.Model.Post", b =>
                {
                    b.HasOne("Sofa.Teacher.Model.Course", "Course")
                        .WithMany("Posts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofa.Teacher.Model.User", b =>
                {
                    b.HasOne("Sofa.Teacher.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");
                });
#pragma warning restore 612, 618
        }
    }
}
