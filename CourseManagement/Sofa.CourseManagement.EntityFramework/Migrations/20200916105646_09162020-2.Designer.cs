// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sofa.CourseManagement.EntityFramework.Context;

namespace Sofa.CourseManagement.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200916105646_09162020-2")]
    partial class _091620202
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sofa.CourseManagement.Model.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("RowVersion");

                    b.Property<string>("Title");

                    b.HasKey("Id")
                        .HasName("PK_Institute");

                    b.ToTable("Institute");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4091cdfe-3d31-4fc1-973e-bd76037fb8ed"),
                            CreateDate = new DateTime(2020, 9, 16, 15, 26, 46, 61, DateTimeKind.Local).AddTicks(1136),
                            IsActive = true,
                            ModifyDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RowVersion = 0,
                            Title = "Default"
                        });
                });

            modelBuilder.Entity("Sofa.CourseManagement.Model.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Level");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<int>("RowVersion");

                    b.HasKey("Id")
                        .HasName("PK_LessonPlan");

                    b.ToTable("LessonPlan");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Model.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("LessonPlanId");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<short>("Order");

                    b.Property<int>("PostType");

                    b.Property<int>("RowVersion");

                    b.Property<string>("Title")
                        .HasColumnName("Title");

                    b.HasKey("Id")
                        .HasName("PK_Post");

                    b.HasIndex("LessonPlanId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Sofa.CourseManagement.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<int>("Level");

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Role");

                    b.Property<int>("RowVersion");

                    b.Property<string>("UserName");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("731874e2-b89c-4509-819a-5b69396a336b"),
                            CreateDate = new DateTime(2020, 9, 16, 15, 26, 46, 28, DateTimeKind.Local).AddTicks(143),
                            Description = "",
                            Email = "jahanbin.ali1988@gmail.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastName = "Jahanbin",
                            Level = 2,
                            ModifyDate = new DateTime(2020, 9, 16, 15, 26, 46, 28, DateTimeKind.Local).AddTicks(2378),
                            PasswordHash = "JB661pQ8yCirbaGKuNu8wIZjd7/lq74u5bDYUaX6GW0=",
                            PhoneNumber = "09224957626",
                            Role = 0,
                            RowVersion = 0,
                            UserName = "sysadmin"
                        },
                        new
                        {
                            Id = new Guid("253e472e-21ac-4864-b218-b364169d0611"),
                            CreateDate = new DateTime(2020, 9, 16, 15, 26, 46, 41, DateTimeKind.Local).AddTicks(5921),
                            Description = "",
                            Email = "jahanbinali88@yahoo.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastName = "Jahanbin",
                            Level = 2,
                            ModifyDate = new DateTime(2020, 9, 16, 15, 26, 46, 41, DateTimeKind.Local).AddTicks(5980),
                            PasswordHash = "JB661pQ8yCirbaGKuNu8wIZjd7/lq74u5bDYUaX6GW0=",
                            PhoneNumber = "09224957626",
                            Role = 1,
                            RowVersion = 0,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = new Guid("50ecc8e1-5c5c-4a97-a5f5-af9e9eba1b70"),
                            CreateDate = new DateTime(2020, 9, 16, 15, 26, 46, 51, DateTimeKind.Local).AddTicks(6796),
                            Description = "",
                            Email = "jahanbin.ali1988@yahoo.com",
                            FirstName = "Ali",
                            IsActive = true,
                            LastName = "Jahanbin",
                            Level = 0,
                            ModifyDate = new DateTime(2020, 9, 16, 15, 26, 46, 51, DateTimeKind.Local).AddTicks(6837),
                            PasswordHash = "JB661pQ8yCirbaGKuNu8wIZjd7/lq74u5bDYUaX6GW0=",
                            PhoneNumber = "09224957626",
                            Role = 1,
                            RowVersion = 0,
                            UserName = "student"
                        });
                });

            modelBuilder.Entity("Sofa.CourseManagement.Model.Institute", b =>
                {
                    b.OwnsMany("Sofa.CourseManagement.Model.Address", "Addresses", b1 =>
                        {
                            b1.Property<Guid>("InstituteId");

                            b1.Property<string>("City");

                            b1.Property<string>("ZipCode");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.HasKey("InstituteId", "City", "ZipCode");

                            b1.ToTable("Address");

                            b1.HasOne("Sofa.CourseManagement.Model.Institute")
                                .WithMany("Addresses")
                                .HasForeignKey("InstituteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Sofa.CourseManagement.Model.Post", b =>
                {
                    b.HasOne("Sofa.CourseManagement.Model.LessonPlan", "LessonPlan")
                        .WithMany("Posts")
                        .HasForeignKey("LessonPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
